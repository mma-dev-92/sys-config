#+titlMy Emacs Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Emacs Key Auth Issue
- Download the *.tar file (gnu-elpa-keyring-update package) [[https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html][here]].
- Run "M-:" + "package-install-file" and provide the path to the downloaded *.tar file.
* Setup Configuration File
** set path to the current file

Provide abs path to this *.org file (important for auto-tangle-on-save).

#+begin_src emacs-lisp
(defvar mma/org-config-path "~/Projects/sys-config/emacs-config/config.org")
#+end_src

#+RESULTS:
: mma/org-config-path

** font sizes

Set font sizes (probably it depends on your dpi).

#+begin_src emacs-lisp
(defvar mma/default-font-size 180)
(defvar mma/documents-font-size 210)
#+end_src

* Setup Packages & Repos
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)

;; Refresh the package list if it is not already downloaded
(unless package-archive-contents
  (package-refresh-contents))

;; Install use-package if it's not already installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Load use-package
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

#+RESULTS:
: t

* UI Configuration
** basic behavior

#+begin_src emacs-lisp
  ;remove the startup message (make emacs welcome screen disapear)
  (setq inhibit-startup-message t)
  ;disable scroll bar
  (scroll-bar-mode -1)
  ;disable toolbar
  (tool-bar-mode -1)
  ;disable tooltip
  (tooltip-mode -1)
  ;set some margins
  (set-fringe-mode 15)
  ;disable menu bar
  (menu-bar-mode -1)
  ;instead of the bell sound set visible bell (as blinks)
  (setq visible-bell t)
  ;display line numbers in evey mode
  (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1)))
  ;disable line numbers for some modes (like terminal and org-mode)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode(lambda() (display-line-numbers-mode 0))))
#+end_src

#+RESULTS:
** eshell customization

#+begin_src emacs-lisp
(use-package eshell-prompt-extras
  :ensure t
  :after eshell
  :config
  (with-eval-after-load 'esh-opt
    (require 'eshell-prompt-extras)
    (setq eshell-highlight-prompt t
          eshell-prompt-function 'epe-theme-lambda)))
#+end_src

#+RESULTS:
: t

** full screen on start

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . fullboth))
#+end_src

** text-scalling (with hydra)

#+begin_src emacs-lisp
(use-package hydra
  :defer 1)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+end_src

* Themes & Fonts
** fonts

#+begin_src emacs-lisp 
(set-face-attribute 'default nil :font "Fira Code Retina" :height mma/default-font-size)
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height mma/default-font-size)
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height mma/documents-font-size :weight 'regular)
#+end_src

#+RESULTS:

** doom-themes

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-badger t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

#+RESULTS:
: t

** doom-modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-height 50))

(setq doom-modeline-icon t)
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
#+end_src

#+RESULTS:
: t

** all-the-icons

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

#+RESULTS:

* For Clean Folders

#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src

* Navigation
** ivy

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :config
  (ivy-mode 1)
  :bind (("C-s" . swiper) ;searching in real time!
         :map ivy-minibuffer-map ;C+vim-like key bindings in the minibuffer
         ("TAB" . ivy-alt-done) 	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map ;same hear
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill)))
#+end_src

#+RESULTS:
: ivy-reverse-i-search-kill

** ivy-rich

#+begin_src emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode t))
#+end_src

#+RESULTS:

** ivy keybindings

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-x C-b") 'counsel-switch-buffer)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x b") 'counsel-ibuffer)
#+end_src

#+RESULTS:
: counsel-ibuffer

** which-key

#+begin_src emacs-lisp
;Hint: use C-h n and C-h p to navigate the pop-up with key bindings
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

#+RESULTS:
: t

** counsel 

#+begin_src emacs-lisp
(use-package counsel
  :bind (
	 :map minibuffer-local-map
	 ("C-r" . "counsel-minibuffer-history")))
#+end_src

#+RESULTS:
: counsel-minibuffer-history

** helpful

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-varuable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

#+RESULTS:
: helpful-key

* Vim Key Bindings
** evil

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  ;; Use visual line motions even outside of visual-line-mode buffers
  ;; If the cursor is at the top / bottom of the current view it will go to the previous / next line
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

#+RESULTS:
: t

** evil-collection

#+begin_src emacs-lisp
;;There is a variable evil-collection-mode-list, that contains the list of all modes
;;to which evil-collection defines key-bindings, if some bindings are not satisfying,
;;just remove the mode from the evil-collection-mode-list.
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

#+RESULTS:
: t

* Org Mode
** org-mode setup

#+begin_src emacs-lisp
;; Basic indentation and line-breaking behavior
(defun mma/org-mode-setup ()
  (setq org-adapt-indentation t)
  (org-indent-mode t)
  (variable-pitch-mode 1)
  (visual-line-mode 1))
#+end_src

#+begin_src emacs-lisp
;; Replace list hyphen with dot
(defun mma/org-bullet-list-setup ()
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))
#+end_src

#+RESULTS:
: mma/org-font-setup

** org

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . mma/org-mode-setup)
    :hook (org-mode . mma/org-bullet-list-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers nil) ;can hide the * for bold text, ~ for the code, ... it can get messy
    (setq org-agenda-start-with-log-mode t) ;it will present a log of all tasks I am working today
    (setq org-log-done 'time) ;it will track the time, when the task was switched to "DONE" (C-c C-t)
    (setq org-log-into-drawer t) ;it will show the log of the task state evolution (in org-agenda-list)
    (setq org-agenda-files
          '("~/Projects/sys-config/emacs-config/org-files/tasks.org"))

    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)))
#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'mma/org-babel-tangle-config)) | org-tempo-setup | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | mma/org-mode-visual-fill | mma/org-font-setup | mma/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) |

** org-bullets

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;;font size adjustment to the heading levels + set font to cantarell, so the documents look like documents
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 0.0)
                  (org-level-5 . 1.0)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)

    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))))
#+end_src

#+RESULTS:

** visual-fill-column

#+begin_src emacs-lisp
(defun mma/org-mode-visual-fill ()
   (setq visual-fill-column-center-text t)
   (setq visual-fill-column-extra-text-width '(30 . 30))
   (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . mma/org-mode-visual-fill))
#+end_src

#+RESULTS:
| mma/org-mode-visual-fill | org-bullets-mode | mma/org-font-setup | mma/org-mode-setup | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (display-line-numbers-mode 0)) |

** org-babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp .t)
    (python . t)))
;; unix like config *.ini files syntax support
(push '("conf-unix" . conf-unix) org-src-lang-modes)
;; python command for evaluating python code blocks
(setq org-babel-python-command "/usr/bin/python3.11")
#+end_src

#+RESULTS:
: /usr/bin/python3

** org-tempo code block temlates

This allows for the shortcuts for the source-code block insertion. For example to insert python source code block, just insert "<py" and then TAB.

#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("conf" . "src conf-unix"))
#+end_src

* CSV Files
figure it out
* Dev
** rainbow-delimiters

#+begin_src emacs-lisp
;If any programming language mode starts (prog-mode), enable rainbow mode
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :config
  ;; Load default smartparens configurations
  (require 'smartparens-config)
  
  ;; Enable smartparens-strict-mode for strict pairing
  (smartparens-strict-mode 1)
  
  ;; Optionally, disable pairing of single quotes in certain modes
  ;; (sp-pair "'" nil :actions :rem)

  ;; Add your sp-local-pair configurations here
  (sp-local-pair 'python-mode "(" nil :post-handlers
                 '(:add
                   ("||\n[i]" "RET")))
  (sp-local-pair 'python-mode "[" nil :post-handlers
                 '(:add
                   ("||\n[i]" "RET")))
  (sp-local-pair 'python-mode "{" nil :post-handlers
                 '(:add
                   ("||\n[i]" "RET"))))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** projectile

#+begin_src emacs-lisp
;Projectile key-bindings can be found with C-c p (as I have set the projectile-command-map below)
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap ;Allows to easily create a key-binding for the projectile package
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects")
    (setq projectile-project-search-path '("~/Projects")))
  (setq projectile-switch-project-action #'projectile-dired)
  (setq projectile-indexing-method 'alien))
#+end_src

** projectile-counsel

#+begin_src emacs-lisp
;After C-c p p and hitting M-o there are many actions, that can be invoked on a project
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** magit

#+begin_src emacs-lisp
(use-package magit
  :custom
  ;; display diff in the same window
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** lsp-mode (language servers)

#+begin_src emacs-lisp

  ;; show nav at the top of each project file
  (defun mma/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . mma/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (lsp-enable-which-key-integration t)
      (setq lsp-ui-peek-enable t
      lsp-ui-peek-show-directory t
      lsp-ui-peek-fontify 'always))

  (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :init
      :custom
      (lsp-ui-doc-enable t)
      (lsp-ui-doc-delay 2)
      (lsp-ui-doc-position 'bottom)
      (lsp-ui-doc-show-with-cursor t)
      (lsp-ui-doc-show-with-mouse nil))

  (with-eval-after-load 'lsp-ui
      (defalias 'lsp-find-definitions #'lsp-ui-peek-find-definitions)
      (defalias 'lsp-find-references #'lsp-ui-peek-find-references))

  (use-package lsp-treemacs
      :after lsp)

  (use-package lsp-ivy
      :after (lsp-mode ivy)
      :commands lsp-ivy-workspace-symbol)

  (use-package yasnippet
      :ensure t
      :config
      (yas-global-mode 1))

  (use-package yasnippet-snippets
      :after yasnippet)

#+end_src

#+RESULTS:

Usefull tips:
- To use lsp-mode you need to install the langauge server first (for any language, like python, C, C++, Rust, ...)
- Next, you can try the following functionalities
  - "completion-at-point" is an ivy-like autocompletion (navigate like in any ivy buffer, TAB to confirm currently selected)
  - when cursor is on the function / variable, documentation is displayed in the minibuffer, if the function is overloaded, you can use "M-n", M-p" to switch to different function implementation docs
  - "C-c l g" - lsp go-to
  - "C-c l r" -lsp refactor menu
  - "flymake-show-diagnostic-buffer" - shows the diagnostics buffer for the currently opened buffer
  - for highlited line of code, if something is wrong (for example variable is never used), you can go ther with the cursor, the bulb symbol will appear in the minibuffer, press "C-c l a" to get the menu of the code actions, that can fix the problem
  - "C-c l = =" - "lsp-format-buffer" it will format the file (however probably *there are better options to format the code created as dedicated packages / linters for specific languages*)
  - "lsp-treemacs-symbols" command pops up the cirrent buffer code structure tree (it can be used to easily navigate throught the code)
  - "lsp-treemacs" just opens the dir tree (after specifying the tree root
** dap-mode (debugging)

#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t
    :after lsp-mode
    :config
    ;; Set up dap for Python
    (require 'dap-python)
    (setq dap-python-debugger 'debugpy)   ;; Use debugpy as the debugger

    ;; Enable dap-ui for visual debugger controls
    (dap-ui-mode)
    (dap-ui-controls-mode))

  (use-package dap-python
    :ensure nil  ;; dap-python comes with dap-mode
    :after (dap-mode)
    :config
    ;; Use pytest as the default test runner
    (setq dap-python-default-test-runner "pytest"))

  (global-set-key (kbd "C-c d t") 'dap-python-debug-test-at-point) ;; Debug test at point
  (global-set-key (kbd "C-c d m") 'dap-python-debug-module)        ;; Debug current module
  (global-set-key (kbd "C-c d b") 'dap-breakpoint-toggle)          ;; Setting a breakpoint
  (global-set-key (kbd "C-c d r") 'dap-ui-repl)                    ;; Open REPL for debbug

  ;; Automatically open the debug UI when debugging starts
  (add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
#+end_src

** company-mode (for nice autocompletion)

#+begin_src emacs-lisp
(use-package company
  :after (lsp-mode yasnippet)
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
      ("<tab>" . company-complete-selection)
      :map lsp-mode-map
      ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
  
(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

** python-dev 
*** python-mode & lsp-mode configuration

#+begin_src emacs-lisp
(use-package python-mode
  :ensure nil
  :hook
  (python-mode . lsp-deferred)
  :custom
  (python-shell-interpreter "/usr/bin/python3") ;; fallback interpreter
  :config
  ;; save each file 
  (add-hook 'python-mode-hook
            (lambda ()
              (setq-local auto-save-visited-interval 1) ;; Save every 1 second of idle time
              (auto-save-visited-mode 2))))

(add-hook 'python-mode-hook 'yas-minor-mode)
#+end_src

#+RESULTS:
| blacken-mode | lsp-deferred | doom-modeline-env-setup-python |

*** python language server settings

#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred))))

  (use-package blacken
    :hook (python-mode . blacken-mode))

  (use-package py-isort
    :hook (before-save . py-isort-before-save))
#+end_src

#+RESULTS:
| py-isort-before-save |

*** ignore python related non-source code files in treemacs

#+begin_src emacs-lisp
;; treemacs files
(with-eval-after-load 'treemacs
  (defun mma/treemacs-ignore-python-files (filename absolute-path)
    "Ignore Python-related files and Emacs backup/autosave files in Treemacs."
    (or
     ;; Ignore __pycache__ directory
     (string-equal filename "__pycache__")
     ;; Ignore compiled Python bytecode files
     (string-suffix-p ".pyc" filename)
     (string-suffix-p ".pyo" filename)
     ;; Ignore Python cache and metadata directories
     (string-suffix-p ".egg-info" filename)
     (string-equal filename ".pytest_cache")
     (string-equal filename ".mypy_cache")
     ;; Ignore Emacs backup and autosave files
     (string-suffix-p "~" filename)
     ;; Correct escaping for autosave files
     (string-match-p "^#.*#$" filename)))

  ;; Add the predicate to Treemacs' ignored file predicates list
  (add-to-list 'treemacs-ignored-file-predicates #'mma/treemacs-ignore-python-files))
#+end_src

*** virtual environments managment

#+begin_src emacs-lisp
  ;; virtual envirnoment management package (very, very usefull)
  (use-package pyvenv
    :config
    (pyvenv-mode 1))

  (defun mma/update-python-environment ()
    "Update both python-mode interpreter and lsp-pyright interpreter to match the current pyvenv.
     Restart lsp-mode and python-mode if they are active to reflect the changes."
    (if (bound-and-true-p pyvenv-virtual-env)
        (let ((python-executable (concat pyvenv-virtual-env "/bin/python")))
          ;; Update python-mode interpreter
          (setq python-shell-interpreter python-executable)
          ;; Update lsp-pyright interpreter
          (setq lsp-pyright-python-executable-cmd python-executable)
	     ;; Update dap-mode debugger interpreter
          (setq dap-python-executable python-executable)
          (message "Python environment updated to: %s" python-executable))
      ;; If no virtual environment is active, reset to the system default
      (setq python-shell-interpreter "/usr/bin/python3")
      (setq lsp-pyright-python-executable-cmd "/usr/bin/python3")
      (message "No virtual environment active, using system Python."))

    ;; Restart python-mode if it's active
    (when (derived-mode-p 'python-mode)
      (python-mode)
      (message "Python mode restarted."))

    ;; Restart lsp-mode if it's active
    (when (bound-and-true-p lsp-mode)
      (lsp-restart-workspace)
      (message "LSP mode restarted.")))

  ;; Hook to pyvenv activation and deactivation
  (add-hook 'pyvenv-post-activate-hooks #'mma/update-python-environment)
  (add-hook 'pyvenv-post-deactivate-hooks #'mma/update-python-environment)
#+end_src

*** unit tests

#+begin_src emacs-lisp
  ;; Enable pytest.el for running Python tests
  (use-package pytest
    :ensure t
    :bind (("C-c t a" . pytest-all)
           ("C-c t m" . pytest-module)
           ("C-c t ." . pytest-one)
           ("C-c t r" . pytest-repeat))
    :config
    ;; Use short traceback with color in pytest output
    ;; Disable color codes if you prefer no ANSI colors with `--color=no`
    (setq pytest-cmd-flags "--tb=short --color=yes"))

  ;; Enable outline-mode in compilation buffer for collapsible sections
  (defun mma/enable-outline-in-compilation ()
    "Enable outline-mode in compilation buffers for pytest output."
    (when (eq major-mode 'compilation-mode)
      (outline-minor-mode 1)
      ;; Customize this regex to match lines you want to fold
      (setq outline-regexp "^\\(ERROR\\|FAILED\\|tests/\\)")
      (outline-hide-sublevels 1)))

  (add-hook 'compilation-mode-hook 'mma/enable-outline-in-compilation)

  ;; Add custom regex to recognize pytest output in compilation-mode
  (add-to-list 'compilation-error-regexp-alist-alist
               '(pytest "^\\([^:\n]+\\):\\([0-9]+\\)" 1 2))
  (add-to-list 'compilation-error-regexp-alist 'pytest)

  ;; Handle ANSI color codes in *compilation* buffer
  (defun my/compilation-colorize ()
    "Apply ANSI color codes in the current buffer."
    (when (eq major-mode 'compilation-mode)
      (ansi-color-apply-on-region (point-min) (point-max))))

  (add-hook 'compilation-filter-hook 'my/compilation-colorize)

  ;; Auto-scroll compilation output to the end
  (setq compilation-scroll-output t)

  ;; Keybindings for running tests and navigating errors
  (global-set-key (kbd "C-c t a") 'pytest-all)       ;; Run all tests
  (global-set-key (kbd "C-c t f") 'pytest-file)      ;; Run tests in current file
  (global-set-key (kbd "C-c t .") 'pytest-one)       ;; Run test at point
  (global-set-key (kbd "C-c t r") 'pytest-repeat)    ;; Re-run last test
  (global-set-key (kbd "C-c t n") 'next-error)       ;; Jump to next test failure
  (global-set-key (kbd "C-c t p") 'previous-error)   ;; Jump to previous test failure

#+end_src

*** debugging
To use dap-mode with pytest, make sure to specify tests root path in the ~pytest.ini~ file.
#+begin_src conf-unix

  [pytest]
  testpaths = tests

#+end_src

* Custom Namespace

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer mma/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (mma/leader-keys
    "tt" '(counsel-load-theme :which-key "choose theme")
    ;; hydra-text-scale is defined in the UI configuration section
    "ts" '(hydra-text-scale/body :which-key "scale text")))
#+end_src

#+RESULTS:
: t

* TODO Tramp mode
* Tangling Configuration File
** Tangle All Code Blocks

Apply the same configuration to every block.

#+begin_src org :tangle no
#+PROPERTY: header-args:emacs-lisp :tangle <file_path> :mkdirp yes
#+end_src

Command above will allow us to set auto-tangle each emacs-lisp code block in this file to the same file every time the "org-babel-tangle" command is executed in this buffer. Of course this approach require to run this command every time, when any emacs-lisp code block has been changed, so it is not the best idea. 

The ~:mkdirp yes~ is allowing to create all the parent directories (if they do not exist already) to match the specified filepath.

** Tangle Configuration File

#+begin_src emacs-lisp :tangle no
(org-babel-tangle)
(org-babel-tangle-file "~/.emacs.d/init.el")
#+end_src

#+RESULTS:

Those two commands above will tangle all the files to the file with a given filepath.

** Auto Tangle Configuration Files

#+begin_src emacs-lisp
;update dynamically given emacs *.el file on save to the path specified in the #+PROPERTY at the beginning of the file
(defun mma/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name mma/org-config-path)) 
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mma/org-babel-tangle-config)))
#+end_src

* System Configuration
** at first

#+begin_src shell :tangle no

  sudo apt-get install software-properties-common -y
  sudo apt-get install curl
  sudo apt-get install git
  sudo apt-get install gnome-tweaks

#+end_src

** latex

#+begin_src shell :tangle no

  sudo apt-get install texlive-science
  sudo apt-get install texlive-latex-extra

#+end_src

** emacs 28 instalation (tested on ubuntu 22.04.5 LTS)

#+begin_src shell :tangle no

  sudo add-apt-repository ppa:kelleyk/emacs
  sudo apt update
  sudo apt install emacs28

#+end_src

** install third-party packages for my emacs configuration

#+begin_src shell

  sudo apt-get install fonts-firacode
  sudo apt-get install elpa-counsel
  sudo apt-get install ripgrep

#+end_src

Also (for my emacs configuration) it is important to install "Cantarell" font. Probably there is no apt-like package for it, but it can be downloaded from [[https://fonts.google.com/specimen/Cantarell][here]].

** python (for version 3.11)

#+begin_src shell :tangle no

  sudo apt-get install python3.11
  sudo apt-get install python3.11-distutils
  sudo apt-get install python3.11-venv
  # make sure, that the pip is installed for the python3.10
  curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11
  # install language server for python (for emacs)
  pip3 install --upgrade pip setuptools
  # install pyenv
  curl https://pyenv.run | bash
  # install dev tools
  python3.11 -m pip install pylint black isort flake8
  # poetry - new, better package manager
  curl -sSL https://install.python-poetry.org | python3 -
  # install pyright language server (nodejs and npm required)
  # remove older versions of nodejs if installed
  sudo apt remove libnode-dev nodejs
  sudo apt autoremove
  sudo apt clean
  # install new version
  curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
  sudo apt install -y nodejs
  # install pyright
  sudo npm install -g pyright
  sudo npm update -g pyright

#+end_src

